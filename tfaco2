#!/usr/bin/env python3
#
# Munin-Plugin for CO2 Monitor by TFA
#
# HID-device detection and munin plugin by Tobias Maedel (t.maedel@alfeld.de)
# Thanks to Tobias Schramm for help with Python3!
#
# based on code by henryk ploetz
# https://hackaday.io/project/5301-reverse-engineering-a-low-cost-usb-co-monitor/log/17909-all-your-base-are-belong-to-us

import os, sys, fcntl, time, socket

def hd(d):
    return " ".join("%02X" % e for e in d)

def decrypt(key,  data):
    cstate = [0x48,  0x74,  0x65,  0x6D,  0x70,  0x39,  0x39,  0x65]
    shuffle = [2, 4, 0, 7, 1, 6, 5, 3]

    phase1 = [0] * 8
    for i, o in enumerate(shuffle):
        phase1[o] = data[i]

    phase2 = [0] * 8
    for i in range(8):
        phase2[i] = phase1[i] ^ key[i]

    phase3 = [0] * 8
    for i in range(8):
        phase3[i] = ( (phase2[i] >> 3) | (phase2[ (i-1+8)%8 ] << 5) ) & 0xff

    ctmp = [0] * 8
    for i in range(8):
        ctmp[i] = ( (cstate[i] >> 4) | (cstate[i]<<4) ) & 0xff

    out = [0] * 8
    for i in range(8):
        out[i] = (0x100 + phase3[i] - ctmp[i]) & 0xff

    return out

if __name__ == "__main__":
    """main"""

    # use lock on socket to indicate that script is already running
    try:
        s = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        ## Create an abstract socket, by prefixing it with null.
        s.bind('\0postconnect_gateway_notify_lock')
    except socket.error as e:
        # if script is already running just exit silently
        sys.exit(0)

    device = False
    
    for filename in os.listdir("/sys/class/hidraw/"):
        symlinkFilename = os.path.realpath("/sys/class/hidraw/" + filename)
        if "04D9:A052" in symlinkFilename:
            device = "/dev/" + filename

    if device == False:
        print("Error! Sensor not detected!")
        sys.exit(0)

    key = [0xc4, 0xc6, 0xc0, 0x92, 0x40, 0x23, 0xdc, 0x96]
    fp = open(device, "a+b",  0)
    HIDIOCSFEATURE_9 = 0xC0094806
    set_report = [0] + key
    fcntl.ioctl(fp, HIDIOCSFEATURE_9, bytearray(set_report))

    tries = 0
    values = {}
    dataReceived = False

    if (len(sys.argv) > 1 and sys.argv[1] == "config"):
        print("graph_title Luftqualitaet")
        print("graph_category sensors")
        print("graph_vlabel ppm")
        print("co2.label CO2 Gehalt in PPM")
        print("co2.type GAUGE")
        #print("tmp.label Temperatur")
        #print("tmp.type GAUGE")

        sys.exit(0)

    while not dataReceived:
        data = list(e for e in fp.read(8))
        decrypted = decrypt(key, data)
        if decrypted[4] != 0x0d or (sum(decrypted[:3]) & 0xff) != decrypted[3]:
            # checksum error. wayne.
            #print (hd(data) + " => " + hd(decrypted) + "Checksum error")
            pass
        else:
            op = decrypted[0]
            val = decrypted[1] << 8 | decrypted[2]
            values[op] = val

            if (0x50 in values) and (0x42 in values):
                co2 = values[0x50]
                tmp = (values[0x42]/16.0-273.15)

                # check if it's a sensible value
                # (i.e. within the measuring range plus some margin)
                if (co2 > 5000 or co2 < 0):
                    continue

                print ("co2.value %4i" % co2)
                print ("tmp.value %3.1f" % tmp)
                dataReceived = True
        tries += 1

        if (tries > 25):
            sys.exit(0)

